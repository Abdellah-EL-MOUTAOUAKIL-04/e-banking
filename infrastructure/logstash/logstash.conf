input {
  file {
    path => "/usr/share/logstash/logs/spring-app.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
  }
}

filter {
  # Assure que le champ @timestamp est correct (si timestamp dans log, sinon garde l’heure actuelle)
  if [timestamp] {
    date {
      match => ["timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss,SSS"]
      target => "@timestamp"
      remove_field => ["timestamp"]
    }
  } else {
    # fallback
    mutate {
      add_field => { "log.timestamp" => "%{@timestamp}" }
    }
  }

  # Normalize log level pour Kibana (ex: INFO -> info)
  if [level] {
    mutate {
      lowercase => ["level"]
      rename => { "level" => "log.level" }
    }
  } else if [log_level] {
    mutate {
      lowercase => ["log_level"]
      rename => { "log_level" => "log.level" }
    }
  }

  # Optional: extraire un champ logger/class si présent dans le JSON
  if [logger] {
    mutate {
      rename => { "logger" => "log.logger" }
    }
  }

  # Tag pour les erreurs
  if [log.level] == "error" {
    mutate {
      add_tag => ["error"]
    }
  }

  # Nettoyage éventuel des champs inutiles
  mutate {
    remove_field => ["host", "path", "input", "agent", "ecs", "log.file.path"]
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "spring-logs-%{+YYYY.MM.dd}"
    # Optionnel : template personnalisé pour mapping des types (à définir dans Elasticsearch)
  }

  stdout { codec => rubydebug }
}
